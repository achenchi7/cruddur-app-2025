# This docker compose file defines a small full-stack app with 2 parts: A flask backend (python), and a react.js frontend
# Both parts are containerized and connected so that they can talk to each other while running in Gitpod

# Step 1 - specify the docker compose file format version. 3.8 is commonly used and is compatible with many docker features
version: "3.8"


# Step 2 - define the separate containers (your app components)
services:
  backend-flask: # This is the backend API server built with flask
    environment: # Set environment variables inside the container
      FRONTEND_URL: "https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
    build: ./backend-flask # Tells docker to build the backend image using the dockerfille found in ./backend-flask
    ports:
      - "4567:4567"
    volumes: # mounts your local ./backend-flask folder into the container. Any changes made locally reflect inside the container
      - ./backend-flask:/backend-flask
  frontend-react-js: # This is the frontend app, build with react
    environment:
      REACT_APP_BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}" # Sets the backend API URL so the frontend knows where to send requests.
    build: ./frontend-react-js #  Tells docker to build the backend image using the dockerfille found in ./backend-flask
    ports:
     - "3000:3000"
    volumes: # mounts your local ./frontend-react-js folder into the container. Any changes made locally reflect inside the container
     - ./frontend-react-js:/frontend-react-js

# The name flag is a hack to change the default prepared folder
# Name when outputting the image names

# Step 3 - define a custom docker network
networks:
  internal-network:
    driver: bridge # bridge is the default driver for internal communication.
    name: cruddur # gives the network a friendly name instead of a long autogenerated one.